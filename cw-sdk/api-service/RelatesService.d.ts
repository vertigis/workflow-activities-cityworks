import { IApiService } from './i-api-service';
import { RelatesServiceTypes as SvcDef } from '../api-interface/RelatesService';
import Requests = SvcDef.Requests;
import Responses = SvcDef.Responses;
import IRelatesService = SvcDef.IRelatesService;
export declare class RelatesService implements IRelatesService {
    private _service;
    constructor(service: IApiService);
    ByTableName(request: Requests.ByTableName): Promise<Responses.ByTableName>;
    EquipChangeOutChangedBy(request: Requests.EquipChangeOutChangedBy): Promise<Responses.EmployeeRelates>;
    InspectionCancelledBy(request: Requests.InspectionCancelledBy): Promise<Responses.EmployeeRelates>;
    InspectionClosedBy(request: Requests.InspectionClosedBy): Promise<Responses.EmployeeRelates>;
    InspectionEditAfterClose(request: Requests.InspectionEditAfterClose): Promise<Responses.EmployeeRelates>;
    InspectionInitiatedBy(request: Requests.InspectionInitiatedBy): Promise<Responses.EmployeeRelates>;
    InspectionInspectedBy(request: Requests.InspectionInspectedBy): Promise<Responses.EmployeeRelates>;
    InspectionSubmitTo(request: Requests.InspectionSubmitTo): Promise<Responses.EmployeeRelates>;
    ProblemLeafDispatchTo(request: Requests.ProblemLeafDispatchTo): Promise<Responses.EmployeeRelates>;
    ProblemLeafSubmitTo(request: Requests.ProblemLeafSubmitTo): Promise<Responses.EmployeeRelates>;
    ProjectApprovedBy(request: Requests.ProjectApprovedBy): Promise<Responses.EmployeeRelates>;
    ProjectAssignedTo(request: Requests.ProjectAssignedTo): Promise<Responses.EmployeeRelates>;
    ProjectInitiatedBy(request: Requests.ProjectInitiatedBy): Promise<Responses.EmployeeRelates>;
    RequestCancelledBy(request: Requests.RequestCancelledBy): Promise<Responses.EmployeeRelates>;
    RequestClosedBy(request: Requests.RequestClosedBy): Promise<Responses.EmployeeRelates>;
    RequestDispatchTo(request: Requests.RequestDispatchTo): Promise<Responses.EmployeeRelates>;
    RequestEditAfterClose(request: Requests.RequestEditAfterClose): Promise<Responses.EmployeeRelates>;
    RequestInitiatedBy(request: Requests.RequestInitiatedBy): Promise<Responses.EmployeeRelates>;
    RequestSubmitTo(request: Requests.RequestSubmitTo): Promise<Responses.EmployeeRelates>;
    SearchViewCost(request: Requests.SearchViewCost): Promise<Responses.EmployeeRelates>;
    TableFields(request: Requests.TableFields): Promise<Responses.TableFields>;
    TaskAssignTo(request: Requests.TaskAssignTo): Promise<Responses.EmployeeRelates>;
    TransferRequestedBy(request: Requests.TransferRequestedBy): Promise<Responses.EmployeeRelates>;
    WorkOrderCancelledBy(request: Requests.WorkOrderCancelledBy): Promise<Responses.EmployeeRelates>;
    WorkOrderClosedBy(request: Requests.WorkOrderClosedBy): Promise<Responses.EmployeeRelates>;
    WorkOrderCompletedBy(request: Requests.WorkOrderCompletedBy): Promise<Responses.EmployeeRelates>;
    WorkOrderEditAfterClose(request: Requests.WorkOrderEditAfterClose): Promise<Responses.EmployeeRelates>;
    WorkOrderInitiatedBy(request: Requests.WorkOrderInitiatedBy): Promise<Responses.EmployeeRelates>;
    WorkOrderRequestedBy(request: Requests.WorkOrderRequestedBy): Promise<Responses.EmployeeRelates>;
    WorkOrderSubmitTo(request: Requests.WorkOrderSubmitTo): Promise<Responses.EmployeeRelates>;
    WorkOrderSupervisors(request: Requests.WorkOrderSupervisors): Promise<Responses.EmployeeRelates>;
}
