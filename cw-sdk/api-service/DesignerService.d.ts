import { IApiService } from './i-api-service';
import { DesignerServiceTypes as SvcDef } from '../api-interface/DesignerService';
import Requests = SvcDef.Requests;
import Responses = SvcDef.Responses;
import IDesignerService = SvcDef.IDesignerService;
export declare class DesignerService implements IDesignerService {
    private _service;
    constructor(service: IApiService);
    AddAttachmentMapping(request: Requests.AddAttachmentMapping): Promise<Responses.AddAttachmentMapping>;
    AddCodeDescription(request: Requests.AddCodeDescription): Promise<Responses.AddCodeDescription>;
    AddCodeDescScore(request: Requests.AddCodeDescScore): Promise<Responses.AddCodeDescScore>;
    AddCodeType(request: Requests.AddCodeType): Promise<Responses.AddCodeType>;
    AddDescScore(request: Requests.AddDescScore): Promise<Responses.AddDescScore>;
    AddDomain(request: Requests.AddDomain): Promise<Responses.AddDomain>;
    AddEmployeeSkillCode(request: Requests.AddEmployeeSkillCode): Promise<Responses.AddEmployeeSkillCode>;
    AddGroup(request: Requests.AddGroup): Promise<Responses.AddGroup>;
    AddRole(request: Requests.AddRole): Promise<Responses.AddRole>;
    AddUsersToRole(request: Requests.AddUsersToRole): Promise<Responses.AddUsersToRole>;
    AttachmentMappings(request: Requests.AttachmentMappings): Promise<Responses.AttachmentMappings>;
    CctvCodes(request: Requests.CctvCodes): Promise<Responses.CctvCodes>;
    CodeDescriptions(request: Requests.CodeDescriptions): Promise<Responses.CodeDescriptions>;
    CodeDescScores(request: Requests.CodeDescScores): Promise<Responses.CodeDescScores>;
    CodeTypes(request: Requests.CodeTypes): Promise<Responses.CodeTypes>;
    CreateUser(request: Requests.CreateUser): Promise<Responses.CreateUser>;
    DeleteAttachmentMappings(request: Requests.DeleteAttachmentMappings): Promise<Responses.DeleteAttachmentMappings>;
    DeleteCodeDescriptions(request: Requests.DeleteCodeDescriptions): Promise<Responses.DeleteCodeDescriptions>;
    DeleteDomains(request: Requests.DeleteDomains): Promise<Responses.DeleteDomains>;
    DeleteEmployeeSkillCodes(request: Requests.DeleteEmployeeSkillCodes): Promise<Responses.DeleteEmployeeSkillCodes>;
    DeleteGroups(request: Requests.DeleteGroups): Promise<Responses.DeleteGroups>;
    DeleteLogin(request: Requests.DeleteLogin): Promise<Responses.DeleteLogin>;
    DeleteRoles(request: Requests.DeleteRoles): Promise<Responses.DeleteRoles>;
    DescScores(request: Requests.DescScores): Promise<Responses.DescScores>;
    Domains(request: Requests.Domains): Promise<Responses.Domains>;
    EmployeeGroups(request: Requests.EmployeeGroups): Promise<Responses.EmployeeGroups>;
    GroupMembers(request: Requests.GroupMembers): Promise<Responses.GroupMembers>;
    Groups(request: Requests.Groups): Promise<Responses.Groups>;
    RemoveUsersFromRole(request: Requests.RemoveUsersFromRole): Promise<Responses.RemoveUsersFromRole>;
    Roles(request: Requests.Roles): Promise<Responses.Roles>;
    SaveCctvCode(request: Requests.SaveCctvCode): Promise<Responses.SaveCctvCode>;
    UnlockUsers(request: Requests.UnlockUsers): Promise<Responses.UnlockUsers>;
    UpdateAttachmentMapping(request: Requests.UpdateAttachmentMapping): Promise<Responses.UpdateAttachmentMapping>;
    UpdateCodeDescription(request: Requests.UpdateCodeDescription): Promise<Responses.UpdateCodeDescription>;
    UpdateCodeDescScore(request: Requests.UpdateCodeDescScore): Promise<Responses.UpdateCodeDescScore>;
    UpdateCodeType(request: Requests.UpdateCodeType): Promise<Responses.UpdateCodeType>;
    UpdateDescScore(request: Requests.UpdateDescScore): Promise<Responses.UpdateDescScore>;
    UpdateDomain(request: Requests.UpdateDomain): Promise<Responses.UpdateDomain>;
    UpdateGroup(request: Requests.UpdateGroup): Promise<Responses.UpdateGroup>;
    UserRoles(request: Requests.UserRoles): Promise<Responses.UserRoles>;
    UsersInRole(request: Requests.UsersInRole): Promise<Responses.UsersInRole>;
    UserStatus(request: Requests.UserStatus): Promise<Responses.UserStatus>;
}
