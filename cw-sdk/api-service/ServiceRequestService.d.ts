import { IApiService } from './i-api-service';
import { ServiceRequestServiceTypes as SvcDef } from '../api-interface/ServiceRequestService';
import Requests = SvcDef.Requests;
import Responses = SvcDef.Responses;
import IServiceRequestService = SvcDef.IServiceRequestService;
export declare class ServiceRequestService implements IServiceRequestService {
    private _service;
    constructor(service: IApiService);
    AddComments(request: Requests.AddComments): Promise<Responses.AddComments>;
    AllStreetCode(request: Requests.AllStreetCode): Promise<Responses.AllStreetCode>;
    AuditLog(request: Requests.AuditLog): Promise<Responses.AuditLog>;
    ById(request: Requests.ById): Promise<Responses.ById>;
    ByIds(request: Requests.ByIds): Promise<Responses.ByIds>;
    ByIncidentAndEmail(request: Requests.ByIncidentAndEmail): Promise<Responses.ByIncidentAndEmail>;
    ByOtherSystemId(request: Requests.ByOtherSystemId): Promise<Responses.ByOtherSystemId>;
    Cancel(request: Requests.Cancel): Promise<Responses.Cancel>;
    ChangeCustomFieldCategory(request: Requests.ChangeCustomFieldCategory): Promise<Responses.ChangeCustomFieldCategory>;
    ChangeProblem(request: Requests.ChangeProblem): Promise<Responses.ChangeProblem>;
    Close(request: Requests.Close): Promise<Responses.Close>;
    Combine(request: Requests.Combine): Promise<Responses.Combine>;
    Comments(request: Requests.Comments): Promise<Responses.Comments>;
    CommentsByRequestIds(request: Requests.CommentsByRequestIds): Promise<Responses.CommentsByRequestIds>;
    Create(request: Requests.Create): Promise<Responses.Create>;
    CreateSearchDefinition(request: Requests.CreateSearchDefinition): Promise<Responses.CreateSearchDefinition>;
    CustomFieldCategories(request: Requests.CustomFieldCategories): Promise<Responses.CustomFieldCategories>;
    CustomFields(request: Requests.CustomFields): Promise<Responses.CustomFields>;
    DefaultStatus(request: Requests.DefaultStatus): Promise<Responses.DefaultStatus>;
    Delete(request: Requests.Delete): Promise<Responses.Delete>;
    DispatchTo(request: Requests.DispatchTo): Promise<Responses.DispatchTo>;
    LinkCases(request: Requests.LinkCases): Promise<Responses.LinkCases>;
    LinkInspections(request: Requests.LinkInspections): Promise<Responses.LinkInspections>;
    LinkWorkOrders(request: Requests.LinkWorkOrders): Promise<Responses.LinkWorkOrders>;
    Move(request: Requests.Move): Promise<Responses.Move>;
    Priorities(request: Requests.Priorities): Promise<Responses.Priorities>;
    ProblemLeafByOtherSysCodeDescs(request: Requests.ProblemLeafByOtherSysCodeDescs): Promise<Responses.ProblemLeafByOtherSysCodeDescs>;
    ProblemLeafBySid(request: Requests.ProblemLeafBySid): Promise<Responses.ProblemLeafBySid>;
    ProblemNodes(request: Requests.ProblemNodes): Promise<Responses.ProblemNodes>;
    Problems(request: Requests.Problems): Promise<Responses.Problems>;
    ProblemsByKeywords(request: Requests.ProblemsByKeywords): Promise<Responses.ProblemsByKeywords>;
    QA(request: Requests.QA): Promise<Responses.QA>;
    Reopen(request: Requests.Reopen): Promise<Responses.Reopen>;
    RequestInspections(request: Requests.RequestInspections): Promise<Responses.RequestInspections>;
    RequestWorkOrders(request: Requests.RequestWorkOrders): Promise<Responses.RequestWorkOrders>;
    Search(request: Requests.Search): Promise<Responses.Search>;
    SearchObject(request: Requests.SearchObject): Promise<Responses.SearchObject>;
    Statuses(request: Requests.Statuses): Promise<Responses.Statuses>;
    SubmitTo(request: Requests.SubmitTo): Promise<Responses.SubmitTo>;
    TemplateCustomFields(request: Requests.TemplateCustomFields): Promise<Responses.TemplateCustomFields>;
    Uncancel(request: Requests.Uncancel): Promise<Responses.Uncancel>;
    UnlinkInspections(request: Requests.UnlinkInspections): Promise<Responses.UnlinkInspections>;
    UnlinkWorkOrders(request: Requests.UnlinkWorkOrders): Promise<Responses.UnlinkWorkOrders>;
    Update(request: Requests.Update): Promise<Responses.Update>;
}
