import { IApiService } from './i-api-service';
import { InspectionServiceTypes as SvcDef } from '../api-interface/InspectionService';
import Requests = SvcDef.Requests;
import Responses = SvcDef.Responses;
import IInspectionService = SvcDef.IInspectionService;
export declare class InspectionService implements IInspectionService {
    private _service;
    constructor(service: IApiService);
    AddEntity(request: Requests.AddEntity): Promise<Responses.AddEntity>;
    Answers(request: Requests.Answers): Promise<Responses.Answers>;
    AuditLog(request: Requests.AuditLog): Promise<Responses.AuditLog>;
    ById(request: Requests.ById): Promise<Responses.ById>;
    ByIds(request: Requests.ByIds): Promise<Responses.ByIds>;
    ByWorkOrderIds(request: Requests.ByWorkOrderIds): Promise<Responses.ByWorkOrderIds>;
    Cancel(request: Requests.Cancel): Promise<Responses.Cancel>;
    Close(request: Requests.Close): Promise<Responses.Close>;
    Create(request: Requests.Create): Promise<Responses.Create>;
    CreateFromParent(request: Requests.CreateFromParent): Promise<Responses.CreateFromParent>;
    CreateFromServiceRequest(request: Requests.CreateFromServiceRequest): Promise<Responses.CreateFromServiceRequest>;
    CreateFromWorkOrder(request: Requests.CreateFromWorkOrder): Promise<Responses.CreateFromWorkOrder>;
    CreateSearchDefinition(request: Requests.CreateSearchDefinition): Promise<Responses.CreateSearchDefinition>;
    CycleFrom(request: Requests.CycleFrom): Promise<Responses.CycleFrom>;
    CycleIntervals(request: Requests.CycleIntervals): Promise<Responses.CycleIntervals>;
    CycleTypes(request: Requests.CycleTypes): Promise<Responses.CycleTypes>;
    Delete(request: Requests.Delete): Promise<Responses.Delete>;
    Districts(request: Requests.Districts): Promise<Responses.Districts>;
    InspectionInspections(request: Requests.InspectionInspections): Promise<Responses.InspectionInspections>;
    InspectionServiceRequests(request: Requests.InspectionServiceRequests): Promise<Responses.InspectionServiceRequests>;
    InspectionWorkOrders(request: Requests.InspectionWorkOrders): Promise<Responses.InspectionWorkOrders>;
    Move(request: Requests.Move): Promise<Responses.Move>;
    Priorities(request: Requests.Priorities): Promise<Responses.Priorities>;
    QA(request: Requests.QA): Promise<Responses.QA>;
    Questions(request: Requests.Questions): Promise<Responses.Questions>;
    RemoveEntity(request: Requests.RemoveEntity): Promise<Responses.RemoveEntity>;
    Resolutions(request: Requests.Resolutions): Promise<Responses.Resolutions>;
    Search(request: Requests.Search): Promise<Responses.Search>;
    SearchObject(request: Requests.SearchObject): Promise<Responses.SearchObject>;
    Shops(request: Requests.Shops): Promise<Responses.Shops>;
    Statuses(request: Requests.Statuses): Promise<Responses.Statuses>;
    SubmitTos(request: Requests.SubmitTos): Promise<Responses.SubmitTos>;
    Templates(request: Requests.Templates): Promise<Responses.Templates>;
    Update(request: Requests.Update): Promise<Responses.Update>;
}
