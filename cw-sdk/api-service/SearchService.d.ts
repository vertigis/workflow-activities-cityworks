import { IApiService } from './i-api-service';
import { SearchServiceTypes as SvcDef } from '../api-interface/SearchService';
import Requests = SvcDef.Requests;
import Responses = SvcDef.Responses;
import ISearchService = SvcDef.ISearchService;
export declare class SearchService implements ISearchService {
    private _service;
    constructor(service: IApiService);
    AssetCalculationResultSaved(request: Requests.AssetCalculationResultSaved): Promise<Responses.Saved>;
    Definition(request: Requests.Definition): Promise<Responses.Definition>;
    DefinitionNames(request: Requests.DefinitionNames): Promise<Responses.Saved>;
    Definitions(request: Requests.Definitions): Promise<Responses.Definitions>;
    DeleteDefinitions(request: Requests.DeleteDefinitions): Promise<Responses.DeleteDefinitions>;
    DisplayFields(request: Requests.DisplayFields): Promise<Responses.DisplayFields>;
    Execute(request: Requests.Execute): Promise<Responses.Execute>;
    GISSaved(request: Requests.GISSaved): Promise<Responses.Saved>;
    InspectionSaved(request: Requests.InspectionSaved): Promise<Responses.Saved>;
    MaterialSaved(request: Requests.MaterialSaved): Promise<Responses.Saved>;
    PllSaved(request: Requests.PllSaved): Promise<Responses.Saved>;
    RecentActivity(request: Requests.RecentActivity): Promise<Responses.RecentActivity>;
    RequestSaved(request: Requests.RequestSaved): Promise<Responses.Saved>;
    RequisitionSaved(request: Requests.RequisitionSaved): Promise<Responses.Saved>;
    SavedByType(request: Requests.SavedByType): Promise<Responses.Saved>;
    SaveDefinition(request: Requests.SaveDefinition): Promise<Responses.SaveDefinition>;
    StoreTransactionSaved(request: Requests.StoreTransactionSaved): Promise<Responses.Saved>;
    Types(request: Requests.Types): Promise<Responses.Types>;
    UpdateEurl(request: Requests.UpdateEurl): Promise<Responses.UpdateEurl>;
    WorkActivitySaved(request: Requests.WorkActivitySaved): Promise<Responses.Saved>;
    WorkOrderEntitySaved(request: Requests.WorkOrderEntitySaved): Promise<Responses.Saved>;
    WorkOrderSaved(request: Requests.WorkOrderSaved): Promise<Responses.Saved>;
}
